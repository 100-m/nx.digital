import{ay as V,bz as $,az as c,_ as q,f as F,aC as A,aD as B,b8 as D,r as z,b5 as H,S as h,E as R,X as x,p as E,aJ as J,aK as G,o as K,c as P,a as U,B as X,Z,v as L,by as Q}from"./BPRHiPFR.js";const s=V(c.ui.strategy,c.ui.textarea,$),W=F({inheritAttrs:!1,props:{modelValue:{type:[String,Number],default:""},id:{type:String,default:null},name:{type:String,default:null},placeholder:{type:String,default:null},required:{type:Boolean,default:!1},disabled:{type:Boolean,default:!1},rows:{type:Number,default:3},maxrows:{type:Number,default:0},autoresize:{type:Boolean,default:!1},autofocus:{type:Boolean,default:!1},autofocusDelay:{type:Number,default:100},resize:{type:Boolean,default:!1},padded:{type:Boolean,default:!0},size:{type:String,default:null,validator(e){return Object.keys(s.size).includes(e)}},color:{type:String,default:()=>s.default.color,validator(e){return[...c.ui.colors,...Object.keys(s.color)].includes(e)}},variant:{type:String,default:()=>s.default.variant,validator(e){return[...Object.keys(s.variant),...Object.values(s.color).flatMap(t=>Object.keys(t))].includes(e)}},textareaClass:{type:String,default:null},class:{type:[String,Object,Array],default:()=>""},ui:{type:Object,default:()=>({})},modelModifiers:{type:Object,default:()=>({})}},emits:["update:modelValue","blur","change"],setup(e,{emit:t}){const{ui:l,attrs:m}=A("textarea",B(e,"ui"),s,B(e,"class")),{emitFormBlur:p,emitFormInput:v,inputId:n,color:y,size:g,name:C}=D(e,s),r=z(H({},e.modelModifiers,{trim:!1,lazy:!1,number:!1})),o=z(null),b=()=>{var a;e.autofocus&&((a=o.value)==null||a.focus())},d=()=>{if(e.autoresize){if(!o.value)return;o.value.rows=e.rows;const a=o.value.style.overflow;o.value.style.overflow="hidden";const u=window.getComputedStyle(o.value),i=parseInt(u.paddingTop),k=parseInt(u.paddingBottom),M=i+k,N=parseInt(u.lineHeight),{scrollHeight:T}=o.value,f=(T-M)/N;f>e.rows&&(o.value.rows=e.maxrows?Math.min(f,e.maxrows):f),o.value.style.overflow=a}},w=a=>{r.value.trim&&(a=a.trim()),r.value.number&&(a=Q(a)),t("update:modelValue",a),v()},I=a=>{d(),r.value.lazy||w(a.target.value)},S=a=>{const u=a.target.value;t("change",u),r.value.lazy&&w(u),r.value.trim&&(a.target.value=u.trim())},j=a=>{t("blur",a),p()};h(()=>{setTimeout(()=>{b()},e.autofocusDelay)}),R(()=>e.modelValue,()=>{x(d)}),h(()=>{setTimeout(()=>{b(),d()},100)});const O=E(()=>{var u,i;const a=((i=(u=l.value.color)==null?void 0:u[y.value])==null?void 0:i[e.variant])||l.value.variant[e.variant];return J(G(l.value.base,l.value.form,l.value.rounded,l.value.placeholder,l.value.size[g.value],e.padded?l.value.padding[g.value]:"p-0",a==null?void 0:a.replaceAll("{color}",y.value),!e.resize&&"resize-none"),e.textareaClass)});return{ui:l,attrs:m,name:C,inputId:n,textarea:o,textareaClass:O,onInput:I,onChange:S,onBlur:j}}}),Y=["id","value","name","rows","required","disabled","placeholder"];function _(e,t,l,m,p,v){return K(),P("div",{class:L(e.ui.wrapper)},[U("textarea",X({id:e.inputId,ref:"textarea",value:e.modelValue,name:e.name,rows:e.rows,required:e.required,disabled:e.disabled,placeholder:e.placeholder,class:e.textareaClass},e.attrs,{onInput:t[0]||(t[0]=(...n)=>e.onInput&&e.onInput(...n)),onBlur:t[1]||(t[1]=(...n)=>e.onBlur&&e.onBlur(...n)),onChange:t[2]||(t[2]=(...n)=>e.onChange&&e.onChange(...n))}),null,16,Y),Z(e.$slots,"default")],2)}const ae=q(W,[["render",_]]);export{ae as default};
