import{ag as y}from"./CefpzQTw.js";async function C(){if($ctx.profile.name)return;const r=`${location.origin}${location.pathname}`.replace("/logout","/login"),{keycloak_url:t,keycloak_realm:c,keycloak_client:n,keycloak_secret:l}=$cfg;if(!t)return $ctx.profile={name:"John Doe",email:"john.doe@neoxam.com",role:"user"},y("/");const _=fetch(t,{method:"HEAD",mode:"no-cors"}),k=new Promise((e,o)=>setTimeout(()=>o(new Error("Timeout")),1e3));await Promise.race([_,k]);const d=new URLSearchParams(location.search),m=d.get("code"),S=d.get("state");if(!m)return P();const h=d.get("error");if(!sessionStorage.verifier||h)throw new Error(h);return U(m,S);function f(e){return btoa(String.fromCharCode.apply(null,new Uint8Array(e))).replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/,"")}function u(e){const o=new Uint8Array(e);return crypto.getRandomValues(o),f(o)}async function $(e){const s=new TextEncoder().encode(e),i=await crypto.subtle.digest("SHA-256",s),p=new Uint8Array(i);return f(p)}function T(e){const[,o]=e.split("."),s=atob(o);return JSON.parse(s)}async function P(){const e=u(16),o=u(32),s=await $(o),i=new URL(`${t}/realms/${c}/protocol/openid-connect/auth`,location.origin);i.search=new URLSearchParams({response_type:"code",client_id:n,redirect_uri:r,scope:"openid",code_challenge:s,code_challenge_method:"S256",state:e}).toString(),sessionStorage.verifier=o,sessionStorage.state=e,location.href=i}async function U(e,o){var g;if(sessionStorage.state&&sessionStorage.state!==o)throw new Error("CRSF verification failed");const i=await(await fetch(`${t}/realms/${c}/protocol/openid-connect/token`,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({response_type:"code",grant_type:"authorization_code",client_id:n,client_secret:l,redirect_uri:r,code:e,code_verifier:sessionStorage.verifier})})).json(),{id_token:p,access_token:w,refresh_token:x}=i;delete sessionStorage.state,delete sessionStorage.verifier;const a=T(w),R=a.name||a.preferred_username||a.email.split("@")[0]||"-",v=["admin","user"].find(A=>a.realm_access.roles.includes(A));$ctx.profile={name:R.titleize(),email:a.email,picture:(g=a.email)==null?void 0:g.gravatar(),role:a.role||v||"user",idToken:p,accessToken:w,refreshToken:x};const b=new URLSearchParams(location.search).get("redirect")||"/";history.replaceState({},"",location.pathname),y(b)}}async function E(){const{keycloak_url:r,keycloak_realm:t,keycloak_client:c}=$cfg,{accessToken:n,refreshToken:l}=$ctx.profile;$ctx.profile={},r&&l&&(await fetch(`${r}/realms/${t}/protocol/openid-connect/logout`,{method:"POST",headers:{Authorization:`Bearer ${n}`,"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({client_id:c,refresh_token:l})}),await fetch(`${r}/realms/${t}/protocol/openid-connect/revoke`,{method:"POST",headers:{Authorization:`Bearer ${n}`,"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({client_id:c,token:l,token_type_hint:"refresh_token"})}),await fetch(`${r}/realms/${t}/protocol/openid-connect/revoke`,{method:"POST",headers:{Authorization:`Bearer ${n}`,"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({client_id:c,token:n,token_type_hint:"access_token"})}))}export{E as a,C as l};
